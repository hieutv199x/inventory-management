/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {AccountHolderAddress} from './AccountHolderAddress.js';
import {Currency} from './Currency.js';
import {TransactionInstrumentDetails} from './TransactionInstrumentDetails.js';
import {TransferRatePreview} from './TransferRatePreview.js';

/**
 * The TransactionInitiationRequest model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest
 * @version 2024-03-01
 */
export class TransactionInitiationRequest {
  /**
   * Constructs a new <code>TransactionInitiationRequest</code>.
   * Request body to initiate a transaction from a SW bank account to another customer defined bank account 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest
   * @class
   * @param sourceAccountId {String} The unique identifier of the source Amazon SW bank account from where the money needs to be debited 
   * @param destinationTransactionInstrument {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInstrumentDetails} Destination bank account details of the transaction request 
   * @param sourceAmount {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} The transaction amount in the source account's currency format. Requests that use a currency other than the source bank account currency fail.
   * @param requestTime {Date} The transaction initiation request time in date-time format 
   */
  constructor(sourceAccountId, destinationTransactionInstrument, sourceAmount, requestTime) {
    this.sourceAccountId = sourceAccountId;
    this.destinationTransactionInstrument = destinationTransactionInstrument;
    this.sourceAmount = sourceAmount;
    this.requestTime = requestTime;
  }

  /**
   * Constructs a <code>TransactionInitiationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest} The populated <code>TransactionInitiationRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TransactionInitiationRequest();
      if (data.hasOwnProperty('sourceAccountId'))
        obj.sourceAccountId = ApiClient.convertToType(data['sourceAccountId'], 'String');
      if (data.hasOwnProperty('destinationAccountId'))
        obj.destinationAccountId = ApiClient.convertToType(data['destinationAccountId'], 'String');
      if (data.hasOwnProperty('destinationTransactionInstrument'))
        obj.destinationTransactionInstrument = TransactionInstrumentDetails.constructFromObject(data['destinationTransactionInstrument']);
      if (data.hasOwnProperty('transactionDescription'))
        obj.transactionDescription = ApiClient.convertToType(data['transactionDescription'], 'String');
      if (data.hasOwnProperty('customerPaymentReference'))
        obj.customerPaymentReference = ApiClient.convertToType(data['customerPaymentReference'], 'String');
      if (data.hasOwnProperty('destinationAccountHolderAddress'))
        obj.destinationAccountHolderAddress = AccountHolderAddress.constructFromObject(data['destinationAccountHolderAddress']);
      if (data.hasOwnProperty('sourceAmount'))
        obj.sourceAmount = Currency.constructFromObject(data['sourceAmount']);
      if (data.hasOwnProperty('transferRateDetails'))
        obj.transferRateDetails = TransferRatePreview.constructFromObject(data['transferRateDetails']);
      if (data.hasOwnProperty('requestTime'))
        obj.requestTime = ApiClient.convertToType(data['requestTime'], 'Date');
    }
    return obj;
  }
}

/**
 * The unique identifier of the source Amazon SW bank account from where the money needs to be debited 
 * @member {String} sourceAccountId
 */
TransactionInitiationRequest.prototype.sourceAccountId = undefined;

/**
 * Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited 
 * @member {String} destinationAccountId
 */
TransactionInitiationRequest.prototype.destinationAccountId = undefined;

/**
 * Destination bank account details of the transaction request 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInstrumentDetails} destinationTransactionInstrument
 */
TransactionInitiationRequest.prototype.destinationTransactionInstrument = undefined;

/**
 * A description of the transaction.
 * @member {String} transactionDescription
 */
TransactionInitiationRequest.prototype.transactionDescription = undefined;

/**
 * If the payment is for VAT (Value-Added-Tax) then enter VAT identification number in this field which will be mandatory. The length constraint is 140 characters and do not allow user to enter any sensitive information other than VAT-ID.
 * @member {String} customerPaymentReference
 */
TransactionInitiationRequest.prototype.customerPaymentReference = undefined;

/**
 * Destination bank account details of the transaction request 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/AccountHolderAddress} destinationAccountHolderAddress
 */
TransactionInitiationRequest.prototype.destinationAccountHolderAddress = undefined;

/**
 * The transaction amount in the source account's currency format. Requests that use a currency other than the source bank account currency fail.
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} sourceAmount
 */
TransactionInitiationRequest.prototype.sourceAmount = undefined;

/**
 * The fees and foreign exchange rates that apply to the transaction. Transfer Rate Preview is currently optional. This field is required when the third party honors the fees and rates of the Seller Wallet transaction.
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview} transferRateDetails
 */
TransactionInitiationRequest.prototype.transferRateDetails = undefined;

/**
 * The transaction initiation request time in date-time format 
 * @member {Date} requestTime
 */
TransactionInitiationRequest.prototype.requestTime = undefined;


