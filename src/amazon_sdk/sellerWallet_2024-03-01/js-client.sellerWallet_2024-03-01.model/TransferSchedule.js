/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {PaymentPreference} from './PaymentPreference.js';
import {TransactionAccount} from './TransactionAccount.js';
import {TransactionType} from './TransactionType.js';
import {TransferScheduleFailures} from './TransferScheduleFailures.js';
import {TransferScheduleInformation} from './TransferScheduleInformation.js';
import {TransferScheduleStatus} from './TransferScheduleStatus.js';

/**
 * The TransferSchedule model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferSchedule
 * @version 2024-03-01
 */
export class TransferSchedule {
  /**
   * Constructs a new <code>TransferSchedule</code>.
   * Transfer schedule details and related historical details.
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferSchedule
   * @class
   * @param transferScheduleId {String} The unique identifier provided by Amazon to the scheduled transfer 
   * @param transactionType {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionType} Type of the transfer 
   * @param transactionDestinationAccount {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount} Destination bank account details in the scheduled transfer. Here bankAccountCountryCode is a MANDATORY field 
   * @param transferScheduleStatus {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleStatus} Type of the transfer schedule. This information can be modified when updating a transfer schedule. 
   * @param transferScheduleInformation {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleInformation} Fields required for the scheduled transfer. This information can be modified when updating a transfer schedule. 
   * @param transferScheduleFailures {Array.<module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleFailures>} Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons. 
   */
  constructor(transferScheduleId, transactionType, transactionDestinationAccount, transferScheduleStatus, transferScheduleInformation, transferScheduleFailures) {
    this.transferScheduleId = transferScheduleId;
    this.transactionType = transactionType;
    this.transactionDestinationAccount = transactionDestinationAccount;
    this.transferScheduleStatus = transferScheduleStatus;
    this.transferScheduleInformation = transferScheduleInformation;
    this.transferScheduleFailures = transferScheduleFailures;
  }

  /**
   * Constructs a <code>TransferSchedule</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferSchedule} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferSchedule} The populated <code>TransferSchedule</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TransferSchedule();
      if (data.hasOwnProperty('transferScheduleId'))
        obj.transferScheduleId = ApiClient.convertToType(data['transferScheduleId'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = TransactionType.constructFromObject(data['transactionType']);
      if (data.hasOwnProperty('transactionSourceAccount'))
        obj.transactionSourceAccount = TransactionAccount.constructFromObject(data['transactionSourceAccount']);
      if (data.hasOwnProperty('transactionDestinationAccount'))
        obj.transactionDestinationAccount = TransactionAccount.constructFromObject(data['transactionDestinationAccount']);
      if (data.hasOwnProperty('transferScheduleStatus'))
        obj.transferScheduleStatus = TransferScheduleStatus.constructFromObject(data['transferScheduleStatus']);
      if (data.hasOwnProperty('transferScheduleInformation'))
        obj.transferScheduleInformation = TransferScheduleInformation.constructFromObject(data['transferScheduleInformation']);
      if (data.hasOwnProperty('paymentPreference'))
        obj.paymentPreference = PaymentPreference.constructFromObject(data['paymentPreference']);
      if (data.hasOwnProperty('transferScheduleFailures'))
        obj.transferScheduleFailures = ApiClient.convertToType(data['transferScheduleFailures'], [TransferScheduleFailures]);
    }
    return obj;
  }
}

/**
 * The unique identifier provided by Amazon to the scheduled transfer 
 * @member {String} transferScheduleId
 */
TransferSchedule.prototype.transferScheduleId = undefined;

/**
 * Type of the transfer 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionType} transactionType
 */
TransferSchedule.prototype.transactionType = undefined;

/**
 * Source bank account details in the scheduled transfer 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount} transactionSourceAccount
 */
TransferSchedule.prototype.transactionSourceAccount = undefined;

/**
 * Destination bank account details in the scheduled transfer. Here bankAccountCountryCode is a MANDATORY field 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount} transactionDestinationAccount
 */
TransferSchedule.prototype.transactionDestinationAccount = undefined;

/**
 * Type of the transfer schedule. This information can be modified when updating a transfer schedule. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleStatus} transferScheduleStatus
 */
TransferSchedule.prototype.transferScheduleStatus = undefined;

/**
 * Fields required for the scheduled transfer. This information can be modified when updating a transfer schedule. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleInformation} transferScheduleInformation
 */
TransferSchedule.prototype.transferScheduleInformation = undefined;

/**
 * Payment preference of the scheduled transfer. This information can be modified when updating a transfer schedule. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/PaymentPreference} paymentPreference
 */
TransferSchedule.prototype.paymentPreference = undefined;

/**
 * Collection that holds Transfer Schedules that has been cancelled or failed due to certain reasons. 
 * @member {Array.<module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferScheduleFailures>} transferScheduleFailures
 */
TransferSchedule.prototype.transferScheduleFailures = undefined;


