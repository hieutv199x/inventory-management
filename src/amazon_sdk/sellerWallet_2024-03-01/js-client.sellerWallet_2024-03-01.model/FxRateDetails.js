/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {BigDecimal} from './BigDecimal.js';
import {RateDirection} from './RateDirection.js';

/**
 * The FxRateDetails model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails
 * @version 2024-03-01
 */
export class FxRateDetails {
  /**
   * Constructs a new <code>FxRateDetails</code>.
   * Foreign exchange rate details displayed when transfer preview is requested. 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails
   * @class
   * @param fxRateId {String} Unique identifier assigned to the fees/foreign exchange Rate of a transaction. 
   * @param baseRate {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BigDecimal} This is the rate that will be market foreign exchange rate. For example: 1USD -> 86.0 INR. 
   * @param effectiveFxRate {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BigDecimal} Displays the foreign exchange rate which will be all rates and fees baked in (i.e; markup fees), example: market fx rate and international transaction fee. 
   * @param rateDirection {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/RateDirection} Rate Direction can refer to the way final amount is calculated. 
   */
  constructor(fxRateId, baseRate, effectiveFxRate, rateDirection) {
    this.fxRateId = fxRateId;
    this.baseRate = baseRate;
    this.effectiveFxRate = effectiveFxRate;
    this.rateDirection = rateDirection;
  }

  /**
   * Constructs a <code>FxRateDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails} The populated <code>FxRateDetails</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new FxRateDetails();
      if (data.hasOwnProperty('fxRateId'))
        obj.fxRateId = ApiClient.convertToType(data['fxRateId'], 'String');
      if (data.hasOwnProperty('baseRate'))
        obj.baseRate = BigDecimal.constructFromObject(data['baseRate']);
      if (data.hasOwnProperty('effectiveFxRate'))
        obj.effectiveFxRate = BigDecimal.constructFromObject(data['effectiveFxRate']);
      if (data.hasOwnProperty('rateDirection'))
        obj.rateDirection = RateDirection.constructFromObject(data['rateDirection']);
    }
    return obj;
  }
}

/**
 * Unique identifier assigned to the fees/foreign exchange Rate of a transaction. 
 * @member {String} fxRateId
 */
FxRateDetails.prototype.fxRateId = undefined;

/**
 * This is the rate that will be market foreign exchange rate. For example: 1USD -> 86.0 INR. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BigDecimal} baseRate
 */
FxRateDetails.prototype.baseRate = undefined;

/**
 * Displays the foreign exchange rate which will be all rates and fees baked in (i.e; markup fees), example: market fx rate and international transaction fee. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BigDecimal} effectiveFxRate
 */
FxRateDetails.prototype.effectiveFxRate = undefined;

/**
 * Rate Direction can refer to the way final amount is calculated. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/RateDirection} rateDirection
 */
FxRateDetails.prototype.rateDirection = undefined;


