/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {RecurringFrequency} from './RecurringFrequency.js';
import {ScheduleExpressionType} from './ScheduleExpressionType.js';

/**
 * The ScheduleExpression model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpression
 * @version 2024-03-01
 */
export class ScheduleExpression {
  /**
   * Constructs a new <code>ScheduleExpression</code>.
   * Parameters containing information of the expression that defines when the schedule runs. The following formats are supported. 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpression
   * @class
   * @param scheduleExpressionType {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpressionType} Field to specify type of the scheduled transfer 
   */
  constructor(scheduleExpressionType) {
    this.scheduleExpressionType = scheduleExpressionType;
  }

  /**
   * Constructs a <code>ScheduleExpression</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpression} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpression} The populated <code>ScheduleExpression</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new ScheduleExpression();
      if (data.hasOwnProperty('scheduleExpressionType'))
        obj.scheduleExpressionType = ScheduleExpressionType.constructFromObject(data['scheduleExpressionType']);
      if (data.hasOwnProperty('recurringFrequency'))
        obj.recurringFrequency = RecurringFrequency.constructFromObject(data['recurringFrequency']);
    }
    return obj;
  }
}

/**
 * Field to specify type of the scheduled transfer 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/ScheduleExpressionType} scheduleExpressionType
 */
ScheduleExpression.prototype.scheduleExpressionType = undefined;

/**
 * Field to specify recurrence of the scheduled transfer. Recurring frequency is mandatory if scheduleExpressionType is set as RECURRING otherwise it should be empty field. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/RecurringFrequency} recurringFrequency
 */
ScheduleExpression.prototype.recurringFrequency = undefined;


