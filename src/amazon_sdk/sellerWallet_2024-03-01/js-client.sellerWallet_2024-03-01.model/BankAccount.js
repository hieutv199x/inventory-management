/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {BankAccountHolderStatus} from './BankAccountHolderStatus.js';
import {BankAccountNumberFormat} from './BankAccountNumberFormat.js';
import {BankAccountOwnershipType} from './BankAccountOwnershipType.js';
import {BankNumberFormat} from './BankNumberFormat.js';

/**
 * The BankAccount model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccount
 * @version 2024-03-01
 */
export class BankAccount {
  /**
   * Constructs a new <code>BankAccount</code>.
   * Details of an Amazon SW bank account, used to hold money earned by a SW customer by selling items. NOTE: Not including account_links, short cut links to the account balance and transactions -> since not mandatory 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccount
   * @class
   * @param bankAccountNumberFormat {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountNumberFormat} Format in which the Bank BankAccount is provided 
   * @param bankAccountOwnershipType {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountOwnershipType} Type of the Bank BankAccount is provided, for all Amazon Seller Wallet account the value will be SELF 
   * @param routingNumber {String} Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0's,  
   * @param bankNumberFormat {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankNumberFormat} Bank account number format or routing number type. 
   * @param accountCountryCode {String} The two digit country code, in ISO 3166 format. 
   * @param accountCurrency {String} BankAccount currency code in ISO 4217 format 
   * @param bankAccountNumberTail {String} Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0's 
   */
  constructor(bankAccountNumberFormat, bankAccountOwnershipType, routingNumber, bankNumberFormat, accountCountryCode, accountCurrency, bankAccountNumberTail) {
    this.bankAccountNumberFormat = bankAccountNumberFormat;
    this.bankAccountOwnershipType = bankAccountOwnershipType;
    this.routingNumber = routingNumber;
    this.bankNumberFormat = bankNumberFormat;
    this.accountCountryCode = accountCountryCode;
    this.accountCurrency = accountCurrency;
    this.bankAccountNumberTail = bankAccountNumberTail;
  }

  /**
   * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccount} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccount} The populated <code>BankAccount</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new BankAccount();
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('accountHolderName'))
        obj.accountHolderName = ApiClient.convertToType(data['accountHolderName'], 'String');
      if (data.hasOwnProperty('bankAccountNumberFormat'))
        obj.bankAccountNumberFormat = BankAccountNumberFormat.constructFromObject(data['bankAccountNumberFormat']);
      if (data.hasOwnProperty('bankName'))
        obj.bankName = ApiClient.convertToType(data['bankName'], 'String');
      if (data.hasOwnProperty('bankAccountOwnershipType'))
        obj.bankAccountOwnershipType = BankAccountOwnershipType.constructFromObject(data['bankAccountOwnershipType']);
      if (data.hasOwnProperty('routingNumber'))
        obj.routingNumber = ApiClient.convertToType(data['routingNumber'], 'String');
      if (data.hasOwnProperty('bankNumberFormat'))
        obj.bankNumberFormat = BankNumberFormat.constructFromObject(data['bankNumberFormat']);
      if (data.hasOwnProperty('accountCountryCode'))
        obj.accountCountryCode = ApiClient.convertToType(data['accountCountryCode'], 'String');
      if (data.hasOwnProperty('accountCurrency'))
        obj.accountCurrency = ApiClient.convertToType(data['accountCurrency'], 'String');
      if (data.hasOwnProperty('bankAccountNumberTail'))
        obj.bankAccountNumberTail = ApiClient.convertToType(data['bankAccountNumberTail'], 'String');
      if (data.hasOwnProperty('bankAccountHolderStatus'))
        obj.bankAccountHolderStatus = BankAccountHolderStatus.constructFromObject(data['bankAccountHolderStatus']);
    }
    return obj;
  }
}

/**
 * The unique identifier provided by Amazon to identify the account 
 * @member {String} accountId
 */
BankAccount.prototype.accountId = undefined;

/**
 * BankAccount holder's name (expected to be Amazon customer) 
 * @member {String} accountHolderName
 */
BankAccount.prototype.accountHolderName = undefined;

/**
 * Format in which the Bank BankAccount is provided 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountNumberFormat} bankAccountNumberFormat
 */
BankAccount.prototype.bankAccountNumberFormat = undefined;

/**
 * The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet 
 * @member {String} bankName
 */
BankAccount.prototype.bankName = undefined;

/**
 * Type of the Bank BankAccount is provided, for all Amazon Seller Wallet account the value will be SELF 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountOwnershipType} bankAccountOwnershipType
 */
BankAccount.prototype.bankAccountOwnershipType = undefined;

/**
 * Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0's,  
 * @member {String} routingNumber
 */
BankAccount.prototype.routingNumber = undefined;

/**
 * Bank account number format or routing number type. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankNumberFormat} bankNumberFormat
 */
BankAccount.prototype.bankNumberFormat = undefined;

/**
 * The two digit country code, in ISO 3166 format. 
 * @member {String} accountCountryCode
 */
BankAccount.prototype.accountCountryCode = undefined;

/**
 * BankAccount currency code in ISO 4217 format 
 * @member {String} accountCurrency
 */
BankAccount.prototype.accountCurrency = undefined;

/**
 * Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0's 
 * @member {String} bankAccountNumberTail
 */
BankAccount.prototype.bankAccountNumberTail = undefined;

/**
 * Bank account holder compliance status 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountHolderStatus} bankAccountHolderStatus
 */
BankAccount.prototype.bankAccountHolderStatus = undefined;


