/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Currency} from './Currency.js';
import {Fee} from './Fee.js';
import {FxRateDetails} from './FxRateDetails.js';

/**
 * The TransferRatePreview model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview
 * @version 2024-03-01
 */
export class TransferRatePreview {
  /**
   * Constructs a new <code>TransferRatePreview</code>.
   * The fees and foreign exchange rates that apply to the transaction.  If the fees are in terms of the `baseAmount` (source account) currency, then the effective rate is equal to **1 - (fees * `baseRate` / `baseAmount`)**.  If the fees are in terms of the `transferAmount` (destination account) currency, then the effective rate is equal to **`baseRate` - (fees / `baseAmount`)**.  In the preceding expressions, **fees** is equal to the sum of all `feeAmount.currencyAmount` values in the `fees` array.
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview
   * @class
   * @param baseAmount {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} Base amount of the transaction. 
   * @param fxRateDetails {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails} The foreign exchange rate value of the transaction. 
   * @param transferAmount {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} The final amount reflects both the fee deduction and currency conversion rate exchange 
   * @param fees {Array.<module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee>} List of fees 
   */
  constructor(baseAmount, fxRateDetails, transferAmount, fees) {
    this.baseAmount = baseAmount;
    this.fxRateDetails = fxRateDetails;
    this.transferAmount = transferAmount;
    this.fees = fees;
  }

  /**
   * Constructs a <code>TransferRatePreview</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview} The populated <code>TransferRatePreview</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TransferRatePreview();
      if (data.hasOwnProperty('baseAmount'))
        obj.baseAmount = Currency.constructFromObject(data['baseAmount']);
      if (data.hasOwnProperty('fxRateDetails'))
        obj.fxRateDetails = FxRateDetails.constructFromObject(data['fxRateDetails']);
      if (data.hasOwnProperty('transferAmount'))
        obj.transferAmount = Currency.constructFromObject(data['transferAmount']);
      if (data.hasOwnProperty('fees'))
        obj.fees = ApiClient.convertToType(data['fees'], [Fee]);
    }
    return obj;
  }
}

/**
 * Base amount of the transaction. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} baseAmount
 */
TransferRatePreview.prototype.baseAmount = undefined;

/**
 * The foreign exchange rate value of the transaction. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FxRateDetails} fxRateDetails
 */
TransferRatePreview.prototype.fxRateDetails = undefined;

/**
 * The final amount reflects both the fee deduction and currency conversion rate exchange 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} transferAmount
 */
TransferRatePreview.prototype.transferAmount = undefined;

/**
 * List of fees 
 * @member {Array.<module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee>} fees
 */
TransferRatePreview.prototype.fees = undefined;


