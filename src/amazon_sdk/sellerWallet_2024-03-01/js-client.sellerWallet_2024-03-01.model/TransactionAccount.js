/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {BankAccountNumberFormat} from './BankAccountNumberFormat.js';

/**
 * The TransactionAccount model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount
 * @version 2024-03-01
 */
export class TransactionAccount {
  /**
   * Constructs a new <code>TransactionAccount</code>.
   * Details of the bank account involved in the transaction.
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount
   * @class
   * @param bankName {String} The name of the bank 
   * @param bankAccountNumberFormat {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountNumberFormat} Bank account format 
   * @param bankAccountCurrency {String} The currency code in ISO 4217 format 
   */
  constructor(bankName, bankAccountNumberFormat, bankAccountCurrency) {
    this.bankName = bankName;
    this.bankAccountNumberFormat = bankAccountNumberFormat;
    this.bankAccountCurrency = bankAccountCurrency;
  }

  /**
   * Constructs a <code>TransactionAccount</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionAccount} The populated <code>TransactionAccount</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TransactionAccount();
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('bankAccountHolderName'))
        obj.bankAccountHolderName = ApiClient.convertToType(data['bankAccountHolderName'], 'String');
      if (data.hasOwnProperty('bankName'))
        obj.bankName = ApiClient.convertToType(data['bankName'], 'String');
      if (data.hasOwnProperty('bankAccountNumberFormat'))
        obj.bankAccountNumberFormat = BankAccountNumberFormat.constructFromObject(data['bankAccountNumberFormat']);
      if (data.hasOwnProperty('bankAccountNumberTail'))
        obj.bankAccountNumberTail = ApiClient.convertToType(data['bankAccountNumberTail'], 'String');
      if (data.hasOwnProperty('bankAccountCountryCode'))
        obj.bankAccountCountryCode = ApiClient.convertToType(data['bankAccountCountryCode'], 'String');
      if (data.hasOwnProperty('bankAccountCurrency'))
        obj.bankAccountCurrency = ApiClient.convertToType(data['bankAccountCurrency'], 'String');
    }
    return obj;
  }
}

/**
 * The unique identifier provided by Amazon to identify the account 
 * @member {String} accountId
 */
TransactionAccount.prototype.accountId = undefined;

/**
 * BankAccount holder's name 
 * @member {String} bankAccountHolderName
 */
TransactionAccount.prototype.bankAccountHolderName = undefined;

/**
 * The name of the bank 
 * @member {String} bankName
 */
TransactionAccount.prototype.bankName = undefined;

/**
 * Bank account format 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/BankAccountNumberFormat} bankAccountNumberFormat
 */
TransactionAccount.prototype.bankAccountNumberFormat = undefined;

/**
 * Last 3 digit of the bank account number 
 * @member {String} bankAccountNumberTail
 */
TransactionAccount.prototype.bankAccountNumberTail = undefined;

/**
 * The two digit country code, in ISO 3166 format. This field is OPTIONAL for transactionSourceAccount object but is MANDATORY field for transactionDestinationAccount 
 * @member {String} bankAccountCountryCode
 */
TransactionAccount.prototype.bankAccountCountryCode = undefined;

/**
 * The currency code in ISO 4217 format 
 * @member {String} bankAccountCurrency
 */
TransactionAccount.prototype.bankAccountCurrency = undefined;


