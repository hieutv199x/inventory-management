/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Currency} from './Currency.js';
import {FeeType} from './FeeType.js';

/**
 * The Fee model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee
 * @version 2024-03-01
 */
export class Fee {
  /**
   * Constructs a new <code>Fee</code>.
   * If the fees is in baseAmount (sourceAccount) currency, effectiveRate =  (baseAmount - sum(fees.feeAmount.currencyAmount)) * baseRate) / baseAmount. If the fees is in transferAmount (destinationAccount) currency, effectiveRate =  (( baseAmount * baseRate ) -  sum(fees.feeAmount.currencyAmount )) / baseAmount 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee
   * @class
   * @param feeId {String} Unique identifier assigned to the Fee. 
   * @param feeType {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FeeType} Displays type of the Fee. 
   * @param feeRateValue {String} The value of the fee in percentage format.
   * @param feeAmount {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} Displays actual value of the fee in numeric format. 
   */
  constructor(feeId, feeType, feeRateValue, feeAmount) {
    this.feeId = feeId;
    this.feeType = feeType;
    this.feeRateValue = feeRateValue;
    this.feeAmount = feeAmount;
  }

  /**
   * Constructs a <code>Fee</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Fee} The populated <code>Fee</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new Fee();
      if (data.hasOwnProperty('feeId'))
        obj.feeId = ApiClient.convertToType(data['feeId'], 'String');
      if (data.hasOwnProperty('feeType'))
        obj.feeType = FeeType.constructFromObject(data['feeType']);
      if (data.hasOwnProperty('feeRateValue'))
        obj.feeRateValue = ApiClient.convertToType(data['feeRateValue'], 'String');
      if (data.hasOwnProperty('feeAmount'))
        obj.feeAmount = Currency.constructFromObject(data['feeAmount']);
    }
    return obj;
  }
}

/**
 * Unique identifier assigned to the Fee. 
 * @member {String} feeId
 */
Fee.prototype.feeId = undefined;

/**
 * Displays type of the Fee. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/FeeType} feeType
 */
Fee.prototype.feeType = undefined;

/**
 * The value of the fee in percentage format.
 * @member {String} feeRateValue
 */
Fee.prototype.feeRateValue = undefined;

/**
 * Displays actual value of the fee in numeric format. 
 * @member {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Currency} feeAmount
 */
Fee.prototype.feeAmount = undefined;


