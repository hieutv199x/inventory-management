/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';

/**
 * The AccountHolderAddress model module.
 * @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/AccountHolderAddress
 * @version 2024-03-01
 */
export class AccountHolderAddress {
  /**
   * Constructs a new <code>AccountHolderAddress</code>.
   * Address for bank account verification of the Payee. For example, this can be a person or business mailing address 
   * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/AccountHolderAddress
   * @class
   * @param addressLine1 {String} Address Line 1 of the public address 
   * @param city {String} City name of the public address 
   * @param state {String} State name of the public address. This is the state or region for China-based addresses.
   * @param postalCode {String} Postal code of the public address 
   * @param countryCode {String} The two digit country code, in ISO 3166 format. 
   */
  constructor(addressLine1, city, state, postalCode, countryCode) {
    this.addressLine1 = addressLine1;
    this.city = city;
    this.state = state;
    this.postalCode = postalCode;
    this.countryCode = countryCode;
  }

  /**
   * Constructs a <code>AccountHolderAddress</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/AccountHolderAddress} obj Optional instance to populate.
   * @return {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/AccountHolderAddress} The populated <code>AccountHolderAddress</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new AccountHolderAddress();
      if (data.hasOwnProperty('addressLine1'))
        obj.addressLine1 = ApiClient.convertToType(data['addressLine1'], 'String');
      if (data.hasOwnProperty('addressLine2'))
        obj.addressLine2 = ApiClient.convertToType(data['addressLine2'], 'String');
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], 'String');
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('postalCode'))
        obj.postalCode = ApiClient.convertToType(data['postalCode'], 'String');
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
      if (data.hasOwnProperty('countryCode'))
        obj.countryCode = ApiClient.convertToType(data['countryCode'], 'String');
    }
    return obj;
  }
}

/**
 * Address Line 1 of the public address 
 * @member {String} addressLine1
 */
AccountHolderAddress.prototype.addressLine1 = undefined;

/**
 * Address Line 2 of the public address 
 * @member {String} addressLine2
 */
AccountHolderAddress.prototype.addressLine2 = undefined;

/**
 * City name of the public address 
 * @member {String} city
 */
AccountHolderAddress.prototype.city = undefined;

/**
 * State name of the public address. This is the state or region for China-based addresses.
 * @member {String} state
 */
AccountHolderAddress.prototype.state = undefined;

/**
 * Postal code of the public address 
 * @member {String} postalCode
 */
AccountHolderAddress.prototype.postalCode = undefined;

/**
 * Country name of the public address 
 * @member {String} country
 */
AccountHolderAddress.prototype.country = undefined;

/**
 * The two digit country code, in ISO 3166 format. 
 * @member {String} countryCode
 */
AccountHolderAddress.prototype.countryCode = undefined;


