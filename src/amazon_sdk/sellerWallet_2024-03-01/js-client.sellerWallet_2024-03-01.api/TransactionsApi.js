/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {CreateTransactionResponse} from '../js-client.sellerWallet_2024-03-01.model/CreateTransactionResponse.js';
import {ErrorList} from '../js-client.sellerWallet_2024-03-01.model/ErrorList.js';
import {Transaction} from '../js-client.sellerWallet_2024-03-01.model/Transaction.js';
import {TransactionInitiationRequest} from '../js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest.js';
import {TransactionListing} from '../js-client.sellerWallet_2024-03-01.model/TransactionListing.js';

/**
* Transactions service.
* @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.api/TransactionsApi
* @version 2024-03-01
*/
export class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.api/TransactionsApi
    * @class
    * @param {module:sellerWallet_2024-03-01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sellerWallet_2024-03-01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a transaction request from Amazon SW account to another customer provided account
     * Create a transaction request from a Seller Wallet account to another customer-provided account.
     * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest} body Defines the actual payload of the request
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/CreateTransactionResponse} and HTTP response
     */
    createTransactionWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTransaction");
      }

      // verify the required parameter 'destAccountDigitalSignature' is set
      if (destAccountDigitalSignature === undefined || destAccountDigitalSignature === null) {
        throw new Error("Missing the required parameter 'destAccountDigitalSignature' when calling createTransaction");
      }

      // verify the required parameter 'amountDigitalSignature' is set
      if (amountDigitalSignature === undefined || amountDigitalSignature === null) {
        throw new Error("Missing the required parameter 'amountDigitalSignature' when calling createTransaction");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling createTransaction");
      }


      let pathParams = {
      };
      let queryParams = {
        'marketplaceId': marketplaceId
      };
      let headerParams = {
        'destAccountDigitalSignature': destAccountDigitalSignature,
        'amountDigitalSignature': amountDigitalSignature
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransactionResponse;

      return this.apiClient.callApi(
        '/finances/transfers/wallet/2024-03-01/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Create a transaction request from Amazon SW account to another customer provided account
     * Create a transaction request from a Seller Wallet account to another customer-provided account.
     * @param {module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionInitiationRequest} body Defines the actual payload of the request
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/CreateTransactionResponse}
     */
    createTransaction(body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId) {
      return this.createTransactionWithHttpInfo(body, destAccountDigitalSignature, amountDigitalSignature, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier
     * Returns a transaction
     * @param {String} transactionId ID of the Amazon SW transaction
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Transaction} and HTTP response
     */
    getTransactionWithHttpInfo(transactionId, marketplaceId) {
      let postBody = null;

      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling getTransaction");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getTransaction");
      }


      let pathParams = {
        'transactionId': transactionId
      };
      let queryParams = {
        'marketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transaction;

      return this.apiClient.callApi(
        '/finances/transfers/wallet/2024-03-01/transactions/{transactionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier
     * Returns a transaction
     * @param {String} transactionId ID of the Amazon SW transaction
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/Transaction}
     */
    getTransaction(transactionId, marketplaceId) {
      return this.getTransactionWithHttpInfo(transactionId, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     * @param {String} accountId ID of the Amazon SW account
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Pagination token to retrieve a specific page of results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionListing} and HTTP response
     */
    listAccountTransactionsWithHttpInfo(accountId, marketplaceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listAccountTransactions");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling listAccountTransactions");
      }


      let pathParams = {
      };
      let queryParams = {
        'accountId': accountId,
        'nextPageToken': opts['nextPageToken'],
        'marketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionListing;

      return this.apiClient.callApi(
        '/finances/transfers/wallet/2024-03-01/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     * @param {String} accountId ID of the Amazon SW account
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Pagination token to retrieve a specific page of results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransactionListing}
     */
    listAccountTransactions(accountId, marketplaceId, opts) {
      return this.listAccountTransactionsWithHttpInfo(accountId, marketplaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
