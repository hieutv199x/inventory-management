/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API Spec.  For more information, refer to the [Seller Wallet Open Banking API Use Case Guide](doc:seller-wallet-open-banking-api-v2024-03-01-use-case-guide).
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {ErrorList} from '../js-client.sellerWallet_2024-03-01.model/ErrorList.js';
import {TransferRatePreview} from '../js-client.sellerWallet_2024-03-01.model/TransferRatePreview.js';

/**
* TransferPreview service.
* @module sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.api/TransferPreviewApi
* @version 2024-03-01
*/
export class TransferPreviewApi {

    /**
    * Constructs a new TransferPreviewApi. 
    * @alias module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.api/TransferPreviewApi
    * @class
    * @param {module:sellerWallet_2024-03-01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:sellerWallet_2024-03-01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
     * Returns list of potential fees on a transaction based on the source and destination country currency code
     * @param {String} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
     * @param {String} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
     * @param {String} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
     * @param {String} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
     * @param {Number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview} and HTTP response
     */
    getTransferPreviewWithHttpInfo(sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount, marketplaceId) {
      let postBody = null;

      // verify the required parameter 'sourceCountryCode' is set
      if (sourceCountryCode === undefined || sourceCountryCode === null) {
        throw new Error("Missing the required parameter 'sourceCountryCode' when calling getTransferPreview");
      }

      // verify the required parameter 'sourceCurrencyCode' is set
      if (sourceCurrencyCode === undefined || sourceCurrencyCode === null) {
        throw new Error("Missing the required parameter 'sourceCurrencyCode' when calling getTransferPreview");
      }

      // verify the required parameter 'destinationCountryCode' is set
      if (destinationCountryCode === undefined || destinationCountryCode === null) {
        throw new Error("Missing the required parameter 'destinationCountryCode' when calling getTransferPreview");
      }

      // verify the required parameter 'destinationCurrencyCode' is set
      if (destinationCurrencyCode === undefined || destinationCurrencyCode === null) {
        throw new Error("Missing the required parameter 'destinationCurrencyCode' when calling getTransferPreview");
      }

      // verify the required parameter 'baseAmount' is set
      if (baseAmount === undefined || baseAmount === null) {
        throw new Error("Missing the required parameter 'baseAmount' when calling getTransferPreview");
      }

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getTransferPreview");
      }


      let pathParams = {
      };
      let queryParams = {
        'sourceCountryCode': sourceCountryCode,
        'sourceCurrencyCode': sourceCurrencyCode,
        'destinationCountryCode': destinationCountryCode,
        'destinationCurrencyCode': destinationCurrencyCode,
        'baseAmount': baseAmount,
        'marketplaceId': marketplaceId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRatePreview;

      return this.apiClient.callApi(
        '/finances/transfers/wallet/2024-03-01/transferPreview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
     * Returns list of potential fees on a transaction based on the source and destination country currency code
     * @param {String} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
     * @param {String} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
     * @param {String} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
     * @param {String} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
     * @param {Number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
     * @param {String} marketplaceId The marketplace for which items are returned. The marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sellerWallet_2024-03-01/js-client.sellerWallet_2024-03-01.model/TransferRatePreview}
     */
    getTransferPreview(sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount, marketplaceId) {
      return this.getTransferPreviewWithHttpInfo(sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount, marketplaceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
