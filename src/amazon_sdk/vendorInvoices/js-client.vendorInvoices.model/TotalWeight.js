/*
 * Selling Partner API for Retail Procurement Payments
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from '../ApiClient.js';
import {Decimal} from './Decimal.js';

/**
 * The TotalWeight model module.
 * @module vendorInvoices/js-client.vendorInvoices.model/TotalWeight
 * @version v1
 */
export class TotalWeight {
  /**
   * Constructs a new <code>TotalWeight</code>.
   * The aggregate weight of this item being invoiced. This information will be available for items sold by weight.
   * @alias module:vendorInvoices/js-client.vendorInvoices.model/TotalWeight
   * @class
   * @param unitOfMeasure {module:vendorInvoices/js-client.vendorInvoices.model/TotalWeight.UnitOfMeasureEnum} The unit of measure for items sold by weight.
   * @param amount {module:vendorInvoices/js-client.vendorInvoices.model/Decimal} 
   */
  constructor(unitOfMeasure, amount) {
    this.unitOfMeasure = unitOfMeasure;
    this.amount = amount;
  }

  /**
   * Constructs a <code>TotalWeight</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:vendorInvoices/js-client.vendorInvoices.model/TotalWeight} obj Optional instance to populate.
   * @return {module:vendorInvoices/js-client.vendorInvoices.model/TotalWeight} The populated <code>TotalWeight</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      switch(typeof data) {
        case 'string':
          obj = String(data);
          break;
        case 'number':
          obj = Number(data);
          break;
        case 'boolean':
          obj = Boolean(data);
          break;
      }
      obj = obj || new TotalWeight();
      if (data.hasOwnProperty('unitOfMeasure'))
        obj.unitOfMeasure = ApiClient.convertToType(data['unitOfMeasure'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = Decimal.constructFromObject(data['amount']);
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>unitOfMeasure</code> property.
 * @enum {String}
 * @readonly
 */
TotalWeight.UnitOfMeasureEnum = {
  /**
   * value: "POUNDS"
   * @const
   */
  POUNDS: "POUNDS",

  /**
   * value: "OUNCES"
   * @const
   */
  OUNCES: "OUNCES",

  /**
   * value: "GRAMS"
   * @const
   */
  GRAMS: "GRAMS",

  /**
   * value: "KILOGRAMS"
   * @const
   */
  KILOGRAMS: "KILOGRAMS"
};

/**
 * The unit of measure for items sold by weight.
 * @member {module:vendorInvoices/js-client.vendorInvoices.model/TotalWeight.UnitOfMeasureEnum} unitOfMeasure
 */
TotalWeight.prototype.unitOfMeasure = undefined;

/**
 * @member {module:vendorInvoices/js-client.vendorInvoices.model/Decimal} amount
 */
TotalWeight.prototype.amount = undefined;


