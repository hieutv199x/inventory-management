/*
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * OpenAPI spec version: 2024-06-01
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient.js";
import {ErrorList} from '../js-client.transfers_2024-06-01.model/ErrorList.js';
import {GetPaymentMethodsResponse} from '../js-client.transfers_2024-06-01.model/GetPaymentMethodsResponse.js';
import {InitiatePayoutRequest} from '../js-client.transfers_2024-06-01.model/InitiatePayoutRequest.js';
import {InitiatePayoutResponse} from '../js-client.transfers_2024-06-01.model/InitiatePayoutResponse.js';

/**
* Default service.
* @module transfers_2024-06-01/js-client.transfers_2024-06-01.api/DefaultApi
* @version 2024-06-01
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:transfers_2024-06-01/js-client.transfers_2024-06-01.api/DefaultApi
    * @class
    * @param {module:transfers_2024-06-01/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:transfers_2024-06-01/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @param {Object} opts Optional parameters
     * @param {Array.<module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/String>} opts.paymentMethodTypes A comma-separated list of the payment method types you want to include in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/GetPaymentMethodsResponse} and HTTP response
     */
    getPaymentMethodsWithHttpInfo(marketplaceId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'marketplaceId' is set
      if (marketplaceId === undefined || marketplaceId === null) {
        throw new Error("Missing the required parameter 'marketplaceId' when calling getPaymentMethods");
      }


      let pathParams = {
      };
      let queryParams = {
        'marketplaceId': marketplaceId,
        'paymentMethodTypes': this.apiClient.buildCollectionParam(opts['paymentMethodTypes'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPaymentMethodsResponse;

      return this.apiClient.callApi(
        '/finances/transfers/2024-06-01/paymentMethods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {String} marketplaceId The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @param {Object} opts Optional parameters
     * @param {Array.<module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/String>} opts.paymentMethodTypes A comma-separated list of the payment method types you want to include in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/GetPaymentMethodsResponse}
     */
    getPaymentMethods(marketplaceId, opts) {
      return this.getPaymentMethodsWithHttpInfo(marketplaceId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Initiates an on-demand payout to the seller's default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/InitiatePayoutRequest} body The request body for the `initiatePayout` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/InitiatePayoutResponse} and HTTP response
     */
    initiatePayoutWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling initiatePayout");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiatePayoutResponse;

      return this.apiClient.callApi(
        '/finances/transfers/2024-06-01/payouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        contentTypes, accepts, returnType
      );
    }

    /**
     * Initiates an on-demand payout to the seller's default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/InitiatePayoutRequest} body The request body for the `initiatePayout` operation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:transfers_2024-06-01/js-client.transfers_2024-06-01.model/InitiatePayoutResponse}
     */
    initiatePayout(body) {
      return this.initiatePayoutWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
