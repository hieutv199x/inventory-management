datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

enum Role {
  OWNER
  RESOURCE
  ACCOUNTANT
  SELLER
}

model UserShopRole {
  id        String   @id @default(cuid()) @map("_id") @db.String
  userId    String   @db.ObjectId
  shopId    String   @db.ObjectId
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop ShopAuthorization @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
  @@map("user_shop_roles")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(SELLER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  createdBy String?   @db.ObjectId
  creator   User?     @relation("UserCreator", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers User[] @relation("UserCreator")
  
  // Bank relations
  uploadedBanks BankAccount[] @relation("BankUploader")
  assignedBanks BankAccount[] @relation("BankAssignee")
  bankHistoryActions BankHistory[]

  userShopRoles UserShopRole[]
}

enum UserRole {
  ADMIN
  MANAGER
  RESOURCE
  ACCOUNTANT
  SELLER
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model TikTokApp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  appName   String   // Tên gợi nhớ cho ứng dụng, ví dụ: "App Bán Hàng Chính"
  appId     String
  appKey    String   @unique // App Key từ TikTok, phải là duy nhất
  appSecret String   // App Secret từ TikTok

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  // Một ứng dụng có thể có nhiều sự ủy quyền từ các shop khác nhau.
  authorizations ShopAuthorization[]
}

model ShopAuthorization {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId

  // --- Thông tin định danh của Shop từ TikTok ---
  shopId     String  @unique // ID của shop (ví dụ: "751..."), phải là duy nhất
  shopCipher String  @unique // Cipher của shop, dùng cho một số API
  shopName   String? // Tên của shop
  region     String? // Khu vực của shop (ví dụ: "VN")

  // --- Dữ liệu ủy quyền (TOKEN NẰM Ở ĐÂY) ---
  accessToken  String   // Access Token của riêng shop này
  refreshToken String   // Refresh Token của riêng shop này
  expiresIn    Int      // Thời gian sống của access token (tính bằng giây)
  scope        String?  // Các quyền được cấp, ví dụ: "orders,products"

  // --- Trạng thái và Mối quan hệ ---
  status    AuthorizationStatus @default(ACTIVE) // Trạng thái của token (sử dụng Enum để an toàn hơn)

  // Liên kết tới ứng dụng đã ủy quyền cho shop này
  appId String    @db.ObjectId
  app   TikTokApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  
  // Bank relations
  bankAccounts BankAccount[]
  
  payments     TikTokPayment[]
  statements   TikTokStatement[]
  withdrawal   TikTokWithdrawal[]

  // Opposite relation for UserShopRole
  userShopRoles UserShopRole[]

  // Opposite relation for TikTokOrder
  tiktokOrders TikTokOrder[]

  // Customer service relations
  conversations     TikTokConversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum giúp đảm bảo tính toàn vẹn dữ liệu cho trường status
enum AuthorizationStatus {
  ACTIVE    // Đang hoạt động
  EXPIRED   // Đã hết hạn (cần refresh)
  REVOKED   // Đã bị thu hồi
  INACTIVE  // Không hoạt động
}

model Product {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId                  String  @unique
  shopId                     String
  title                      String
  description                String
  status                     String
  isNotForSale               Boolean
  isCodAllowed               Boolean
  isPreOwned                 Boolean
  createTime                 Int
  updateTime                 Int
  shippingInsuranceRequirement String

  brandId                    String? @map("brand_id") @db.ObjectId
  auditId                    String?  @unique @map("audit_id") @db.ObjectId

  brand                      Brand?  @relation(fields: [brandId], references: [id])
  audit                      Audit?  @relation(fields: [auditId], references: [id])

  dimensions                 PackageDimension?
  weight                     PackageWeight?
  skus                       Sku[]
  categories                 CategoryChain[]
  images                     ProductImage[]
  attributes                 ProductAttribute[]

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brandId   String   @unique
  name      String
  products  Product[]
}

model Audit {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  status             String
  preApprovedReasons String[]
  failedReasons      String[]
  suggestions        String[]
  product            Product?
}

model PackageDimension {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @unique @db.ObjectId
  height    String
  length    String
  width     String
  unit      String
  product   Product  @relation(fields: [productId], references: [id])
}

model PackageWeight {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @unique @db.ObjectId
  value     String
  unit      String
  product   Product  @relation(fields: [productId], references: [id])
}

model CategoryChain {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String
  localName  String
  parentId   String
  isLeaf     Boolean
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, categoryId])
}

model ProductImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  uri        String
  width      Int
  height     Int
  urls       String[]
  thumbUrls  String[]
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, uri])
}

model ProductAttribute {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  attrId     String
  name       String
  values     AttributeValue[]
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, attrId])
}

model AttributeValue {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  productAttributeId  String   @db.ObjectId
  valueId             String
  name                String
  productAttribute    ProductAttribute @relation(fields: [productAttributeId], references: [id])

  @@unique([productAttributeId, valueId])
}

model Sku {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId        String   @unique
  productId    String   @db.ObjectId
  sellerSku    String
  price        Price?
  inventory    Inventory[]
  product      Product  @relation(fields: [productId], references: [id])
}

model Price {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId              String   @unique @db.ObjectId
  currency           String
  salePrice          String
  taxExclusivePrice  String
  sku                Sku     @relation(fields: [skuId], references: [id])
}

model Inventory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId      String   @db.ObjectId
  quantity   Int
  warehouseId String
  sku        Sku     @relation(fields: [skuId], references: [id])
  @@unique([skuId, warehouseId])
}

model BankAccount {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber String
  routingNumber String
  swiftCode     String
  bankName      String
  accountHolder String
  status        BankStatus @default(UNUSED)
  uploadDate    DateTime   @default(now())
  setupDate     DateTime?
  
  // Relations
  uploaderId    String @db.ObjectId
  uploader      User   @relation("BankUploader", fields: [uploaderId], references: [id])
  
  assigneeId    String? @db.ObjectId
  assignee      User?   @relation("BankAssignee", fields: [assigneeId], references: [id])
  
  shopId        String? @db.ObjectId
  shop          ShopAuthorization? @relation(fields: [shopId], references: [id])
  
  historyActions BankHistory[]

  @@map("bank_accounts")
}

model BankHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  details   String
  timestamp DateTime @default(now())
  
  // Relations
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  
  bankId    String? @db.ObjectId
  bank      BankAccount? @relation(fields: [bankId], references: [id])

  @@map("bank_history")
}

enum BankStatus {
  USED
  UNUSED
}


model TikTokPayment {
  id                             String   @id @default(auto()) @map("_id") @db.ObjectId

  paymentId                      String   @unique
  createTime                     Int
  status                         String

  amountValue                    String?
  amountCurrency                 String?

  settlementAmountValue          String?
  settlementAmountCurrency       String?

  reserveAmountValue             String?
  reserveAmountCurrency          String?

  paymentBeforeExchangeValue     String?
  paymentBeforeExchangeCurrency  String?

  exchangeRate                   String?
  paidTime                       Int?
  bankAccount                    String?

  // Liên kết shop
  shopId                         String
  shop                           ShopAuthorization @relation(fields: [shopId], references: [shopId])

  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}

model TikTokStatement {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId

  statementId           String   @unique 
  statementTime         Int

  settlementAmount      String?
  currency              String?
  revenueAmount         String?
  feeAmount             String?
  adjustmentAmount      String?
  paymentStatus         String?
  paymentId             String?
  netSalesAmount        String?
  shippingCostAmount    String?

  // Liên kết shop
  shopId                String
  shop                  ShopAuthorization @relation(fields: [shopId], references: [shopId])

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model TikTokWithdrawal {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  withdrawalId  String   @unique
  amount        Float
  status        String
  currency      String
  type          String
  createTime    Int
  createdAt     DateTime
  updatedAt     DateTime
  shopId        String
  shop          ShopAuthorization @relation(fields: [shopId], references: [shopId])

}

model TikTokOrder {
  id                               String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId                          String   @unique // "id" field from API
  
  // Basic order information
  buyerEmail                       String
  buyerMessage                     String?
  cancelOrderSlaTime               Int?
  collectionTime                   Int?
  commercePlatform                 String?
  createTime                       Int
  updateTime                       Int?
  
  // Delivery information
  deliveryOptionId                 String?
  deliveryOptionName               String?
  deliveryTime                     Int?
  deliveryType                     String?
  fulfillmentType                  String?
  
  // Order flags
  hasUpdatedRecipientAddress       Boolean  @default(false)
  isCod                           Boolean  @default(false)
  isOnHoldOrder                   Boolean  @default(false)
  isReplacementOrder              Boolean  @default(false)
  isSampleOrder                   Boolean  @default(false)
  
  // Order metadata
  orderType                       String?
  paidTime                        Int?
  paymentMethodName               String?
  status                          String
  
  // Shipping information
  shippingProvider                String?
  shippingProviderId              String?
  shippingType                    String?
  trackingNumber                  String?
  
  // SLA times
  rtsSlaTime                      Int?
  rtsTime                         Int?
  ttsSlaTime                      Int?
  
  // User and warehouse
  userId                          String?
  warehouseId                     String?
  
  // Shop relation
  shopId                          String
  shop                            ShopAuthorization @relation(fields: [shopId], references: [shopId])
  
  // Related data
  lineItems                       TikTokOrderLineItem[]
  packages                        TikTokOrderPackage[]
  payment                         TikTokOrderPayment?
  recipientAddress                TikTokOrderRecipientAddress?
  
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  
  @@map("tiktok_orders")
}

model TikTokOrderLineItem {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  lineItemId            String   @unique // "id" field from API
  
  // Product information
  productId             String
  productName           String
  skuId                 String
  skuName               String?
  skuType               String?
  sellerSku             String?
  skuImage              String?
  
  // Pricing information
  currency              String
  originalPrice         String
  salePrice             String
  sellerDiscount        String?
  platformDiscount      String?
  
  // Status and metadata
  displayStatus         String?
  isGift                Boolean  @default(false)
  
  // Package and shipping
  packageId             String?
  packageStatus         String?
  shippingProviderId    String?
  shippingProviderName  String?
  trackingNumber        String?
  rtsTime               Int?
  
  // Order relation
  orderId               String   @db.ObjectId
  order                 TikTokOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("tiktok_order_line_items")
}

model TikTokOrderPayment {
  id                                    String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Payment amounts
  currency                              String
  originalTotalProductPrice             String?
  originalShippingFee                   String?
  subTotal                              String?
  totalAmount                           String?
  tax                                   String?
  
  // Discounts
  sellerDiscount                        String?
  platformDiscount                      String?
  
  // Shipping fees
  shippingFee                           String?
  shippingFeeCofundedDiscount          String?
  shippingFeePlatformDiscount          String?
  shippingFeeSellerDiscount            String?
  
  // Order relation
  orderId                               String   @unique @db.ObjectId
  order                                 TikTokOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt                             DateTime @default(now())
  updatedAt                             DateTime @updatedAt
  
  @@map("tiktok_order_payments")
}

model TikTokOrderRecipientAddress {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Address details
  addressDetail             String?
  addressLine1              String?
  addressLine2              String?
  addressLine3              String?
  addressLine4              String?
  fullAddress               String?
  postalCode                String?
  regionCode                String?
  
  // Name information
  firstName                 String?
  firstNameLocalScript      String?
  lastName                  String?
  lastNameLocalScript       String?
  name                      String?
  
  // Contact information
  phoneNumber               String?
  
  // Order relation
  orderId                   String   @unique @db.ObjectId
  order                     TikTokOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // District information
  districtInfo              TikTokAddressDistrict[]
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@map("tiktok_order_recipient_addresses")
}

model TikTokAddressDistrict {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  addressLevel              String   // "L0", "L1", "L2", "L3"
  addressLevelName          String   // "Country", "province", "city", "ward"
  addressName               String
  
  // Recipient address relation
  recipientAddressId        String   @db.ObjectId
  recipientAddress          TikTokOrderRecipientAddress @relation(fields: [recipientAddressId], references: [id], onDelete: Cascade)
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@map("tiktok_address_districts")
}

model TikTokOrderPackage {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  packageId                 String   // "id" field from packages array
  
  // Order relation
  orderId                   String   @db.ObjectId
  order                     TikTokOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@unique([orderId, packageId])
  @@map("tiktok_order_packages")
}

model TikTokConversation {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String   @unique // "id" field from API
  participantCount  Int
  canSendMessage    Boolean
  unreadCount       Int
  createTime        Int
  
  // Shop relation
  shopId            String
  shop              ShopAuthorization @relation(fields: [shopId], references: [shopId])
  
  // Related data
  participants      TikTokConversationParticipant[]
  messages          TikTokConversationMessage[]
  latestMessage     TikTokConversationMessage? @relation("LatestMessage")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("tiktok_conversations")
}

model TikTokConversationParticipant {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  imUserId          String   // "im_user_id" from API
  userId            String?  // "user_id" from API
  role              String   // "BUYER", "SELLER", etc.
  nickname          String
  avatar            String?
  buyerPlatform     String?  // "TIKTOK_SHOP", etc.
  
  // Conversation relation
  conversationId    String   @db.ObjectId
  conversation      TikTokConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Messages sent by this participant
  sentMessages      TikTokConversationMessage[] @relation("MessageSender")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([conversationId, imUserId])
  @@map("tiktok_conversation_participants")
}

model TikTokConversationMessage {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  messageId         String   @unique // "id" field from API
  type              String   // "TEXT", "IMAGE", "ORDER", etc.
  content           String   // JSON string containing message content
  createTime        Int
  isVisible         Boolean
  messageIndex      String?  // "index" field from API
  
  // Conversation relation
  conversationId    String   @db.ObjectId
  conversation      TikTokConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Sender relation
  senderId          String?  @db.ObjectId
  sender            TikTokConversationParticipant? @relation("MessageSender", fields: [senderId], references: [id])
  
  // Latest message relation (one-to-one)
  isLatestFor       TikTokConversation? @relation("LatestMessage", fields: [isLatestForId], references: [id])
  isLatestForId     String? @unique @db.ObjectId
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("tiktok_conversation_messages")
}