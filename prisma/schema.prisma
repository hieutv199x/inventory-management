datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(SELLER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  createdBy String?   @db.ObjectId
  creator   User?     @relation("UserCreator", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers User[] @relation("UserCreator")
  
  // Bank relations
  uploadedBanks BankAccount[] @relation("BankUploader")
  assignedBanks BankAccount[] @relation("BankAssignee")
  bankHistoryActions BankHistory[]
}

enum UserRole {
  ADMIN
  MANAGER
  ACCOUNTANT
  SELLER
  RESOURCE
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  sessionToken String   @unique
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}

model TikTokApp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  appName   String   // Tên gợi nhớ cho ứng dụng, ví dụ: "App Bán Hàng Chính"
  appId     String
  appKey    String   @unique // App Key từ TikTok, phải là duy nhất
  appSecret String   // App Secret từ TikTok

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Một ứng dụng có thể có nhiều sự ủy quyền từ các shop khác nhau.
  authorizations ShopAuthorization[]
}

model ShopAuthorization {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId

  // --- Thông tin định danh của Shop từ TikTok ---
  shopId     String  @unique // ID của shop (ví dụ: "751..."), phải là duy nhất
  shopCipher String  @unique // Cipher của shop, dùng cho một số API
  shopName   String? // Tên của shop
  region     String? // Khu vực của shop (ví dụ: "VN")

  // --- Dữ liệu ủy quyền (TOKEN NẰM Ở ĐÂY) ---
  accessToken  String   // Access Token của riêng shop này
  refreshToken String   // Refresh Token của riêng shop này
  expiresIn    Int      // Thời gian sống của access token (tính bằng giây)
  scope        String?  // Các quyền được cấp, ví dụ: "orders,products"

  // --- Trạng thái và Mối quan hệ ---
  status    AuthorizationStatus @default(ACTIVE) // Trạng thái của token (sử dụng Enum để an toàn hơn)

  // Liên kết tới ứng dụng đã ủy quyền cho shop này
  appId String    @db.ObjectId
  app   TikTokApp @relation(fields: [appId], references: [id], onDelete: Cascade)
  
  // Bank relations
  bankAccounts BankAccount[]
  
  payments     TikTokPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum giúp đảm bảo tính toàn vẹn dữ liệu cho trường status
enum AuthorizationStatus {
  ACTIVE    // Đang hoạt động
  EXPIRED   // Đã hết hạn (cần refresh)
  REVOKED   // Đã bị thu hồi
  INACTIVE  // Không hoạt động
}

model Product {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId                  String  @unique
  shopId                     String
  title                      String
  description                String
  status                     String
  isNotForSale               Boolean
  isCodAllowed               Boolean
  isPreOwned                 Boolean
  createTime                 Int
  updateTime                 Int
  shippingInsuranceRequirement String

  brandId                    String? @map("brand_id") @db.ObjectId
  auditId                    String?  @unique @map("audit_id") @db.ObjectId

  brand                      Brand?  @relation(fields: [brandId], references: [id])
  audit                      Audit?  @relation(fields: [auditId], references: [id])

  dimensions                 PackageDimension?
  weight                     PackageWeight?
  skus                       Sku[]
  categories                 CategoryChain[]
  images                     ProductImage[]
  attributes                 ProductAttribute[]

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brandId   String   @unique
  name      String
  products  Product[]
}

model Audit {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  status             String
  preApprovedReasons String[]
  failedReasons      String[]
  suggestions        String[]
  product            Product?
}

model PackageDimension {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @unique @db.ObjectId
  height    String
  length    String
  width     String
  unit      String
  product   Product  @relation(fields: [productId], references: [id])
}

model PackageWeight {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @unique @db.ObjectId
  value     String
  unit      String
  product   Product  @relation(fields: [productId], references: [id])
}

model CategoryChain {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String
  localName  String
  parentId   String
  isLeaf     Boolean
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, categoryId])
}

model ProductImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  uri        String
  width      Int
  height     Int
  urls       String[]
  thumbUrls  String[]
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, uri])
}

model ProductAttribute {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  attrId     String
  name       String
  values     AttributeValue[]
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([productId, attrId])
}

model AttributeValue {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  productAttributeId  String   @db.ObjectId
  valueId             String
  name                String
  productAttribute    ProductAttribute @relation(fields: [productAttributeId], references: [id])

  @@unique([productAttributeId, valueId])
}

model Sku {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId        String   @unique
  productId    String   @db.ObjectId
  sellerSku    String
  price        Price?
  inventory    Inventory[]
  product      Product  @relation(fields: [productId], references: [id])
}

model Price {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId              String   @unique @db.ObjectId
  currency           String
  salePrice          String
  taxExclusivePrice  String
  sku                Sku     @relation(fields: [skuId], references: [id])
}

model Inventory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  skuId      String   @db.ObjectId
  quantity   Int
  warehouseId String
  sku        Sku     @relation(fields: [skuId], references: [id])
  @@unique([skuId, warehouseId])
}

model BankAccount {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber String
  routingNumber String
  swiftCode     String
  bankName      String
  accountHolder String
  status        BankStatus @default(UNUSED)
  uploadDate    DateTime   @default(now())
  setupDate     DateTime?
  
  // Relations
  uploaderId    String @db.ObjectId
  uploader      User   @relation("BankUploader", fields: [uploaderId], references: [id])
  
  assigneeId    String? @db.ObjectId
  assignee      User?   @relation("BankAssignee", fields: [assigneeId], references: [id])
  
  shopId        String? @db.ObjectId
  shop          ShopAuthorization? @relation(fields: [shopId], references: [id])
  
  historyActions BankHistory[]

  @@map("bank_accounts")
}

model BankHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  details   String
  timestamp DateTime @default(now())
  
  // Relations
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  
  bankId    String? @db.ObjectId
  bank      BankAccount? @relation(fields: [bankId], references: [id])

  @@map("bank_history")
}

enum BankStatus {
  USED
  UNUSED
}


model TikTokPayment {
  id                             String   @id @default(auto()) @map("_id") @db.ObjectId

  paymentId                      String   @unique
  createTime                     Int
  status                         String

  amountValue                    String?
  amountCurrency                 String?

  settlementAmountValue          String?
  settlementAmountCurrency       String?

  reserveAmountValue             String?
  reserveAmountCurrency          String?

  paymentBeforeExchangeValue     String?
  paymentBeforeExchangeCurrency  String?

  exchangeRate                   String?
  paidTime                       Int?
  bankAccount                    String?

  // Liên kết shop
  shopId                         String
  shop                           ShopAuthorization @relation(fields: [shopId], references: [shopId])

  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
}